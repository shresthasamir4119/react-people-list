{"version":3,"sources":["components/PeopleList.js","components/People.js","components/Header.js","components/Details.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["PeopleList","divStyle","cursor","padding","borderBottom","background","color","this","props","people","id","firstName","lastName","profileImage","style","onClick","show","bind","className","src","alt","Component","People","name","map","key","showDetail","React","Header","Details","buttonStyle","border","margin","data","email","back","Search","searchText","type","placeholder","onChange","e","target","value","find","EnhancedDetail","state","clickedOnPeople","search","filteredData","App","setState","text","filter","toLowerCase","includes","loaded","fetch","then","res","json","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c983f205.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass PeopleList extends Component{\n\trender(){\n\t\tconst {id, firstName, lastName, profileImage} = this.props.people;\n  \treturn (\n  \t\t<div style ={this.divStyle} onClick = {this.props.show.bind(this,id-1)} className ='clearfix'>\n  \t\t\t<p>\n  \t\t\t{firstName} {lastName}\n        <img className = 'ppImage' src ={profileImage} alt='profile'/>\n  \t\t\t</p>\n  \t\t\t\n  \t\t</div>\n  \t\t)\n\t}\n\n  divStyle = {\n    cursor:'pointer',\n    padding : '10px 10px',\n    borderBottom : '1px #000 dashed',\n    background : '#ddd',\n    color : '#222'\n  }\n}\n\nexport default PeopleList;","import React from 'react';\nimport PeopleList from './PeopleList';\n\nclass People extends React.Component{\n\trender(){\n\t\treturn this.props.name.map((people) =>(\n\t\t\t<div key = {people.id}>\n\t\t\t<PeopleList people = {people}  showDetail = {this.props.showDetail} show = {this.props.show} />\n\t\t\t</div>\n\t\t\t));\n\t}\n}\n\nexport default People;","import React from 'react';\n\n class Header extends React.Component{\n \trender(){\n \t\treturn (\n \t\t\t<h1> People </h1>\n \t\t\t)\n \t}\n }\n\n export default Header;\n","import React from 'react';\n\nclass Details extends React.Component{\n\tbuttonStyle = {\n\t\tborder:'none',\n\t\tbackground:'#333',\n\t\tcolor:'#ddd',\n\t\tpadding:'10px',\n\t\tmargin:'20px 0 0 0'\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div className = 'detail'>\n\t\t\t\t<p>\n\t\t\t\t<img className='profilepic' src={this.props.data.profileImage} alt=\"pp\"/>\n\t\t\t\tFirst Name : {this.props.data.firstName}<br/>\n\t\t\t\tLast Name : {this.props.data.lastName}<br/>\n\t\t\t\tEmail : {this.props.data.email}<br/>\n\t\t\t\t</p>\n\t\t\t\t<button style = {this.buttonStyle} onClick = {this.props.back}>Back</button>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Details;","import React from 'react';\n\nclass Search extends React.Component{\n\tsearchText='';\n\trender(){\n\n\t\treturn(\n\t\t\t<form>\n\t\t\t\t<input type='text' placeholder='Search people here' className = 'search' \n\t\t\t\tonChange = {(e)=>{\n\t\t\t\t\tthis.searchText=e.target.value;\n\t\t\t\t\tthis.props.find(this.searchText);\n\t\t\t\t}} \n\t\t\t\t/>\n\n\t\t\t</form>\n\t\t\t)\n\t}\n}\n\nexport default Search;","import React from 'react';\nimport People from './components/People';\nimport Header from './components/Header';\nimport Details from './components/Details';\nimport Search from './components/Search';\n\nimport './App.css';\nimport './style/style.css';\n\nfunction withDetail(Component){\n  return function(props) {\n    if (props.state.clickedOnPeople) {\n     return <Details data={props.state.data[props.state.id]} back={props.back}/>;\n    }\n    else {\n      \n      return (\n        <>\n        <Header />\n        <Search find={props.search} />\n        <Component name = {props.state.filteredData} show={props.show} />\n        </>\n        ); \n    }\n  };\n}\n\nconst EnhancedDetail = withDetail(People);\n\nclass App extends React.Component{\n  back = () =>{\n    this.setState({\n      clickedOnPeople:false,\n      id:'',\n      filteredData:this.state.data,\n    })\n  }\n\n  search = (text)=>{\n    this.setState({\n      filteredData:this.state.data.filter((data)=>{\n        if(data.firstName.toLowerCase().includes(text.toLowerCase())||\n          data.lastName.toLowerCase().includes(text.toLowerCase())){\n          return data;\n        }\n        return null;\n      })\n    })\n  } \n\n  show = (data) =>{\n    this.setState({\n      clickedOnPeople:true,\n      id:data,\n    })\n  }\n\n  state = {\n    data:[],\n    loaded : false,\n    id:'',\n    clickedOnPeople:false,\n    searchText:'',\n    filteredData:[],\n  }\n\n  componentDidMount(){\n    fetch('https://mock-io.herokuapp.com/users')\n    .then(res => res.json())\n    .then(res => this.setState({data:res, loaded: true,filteredData:res}));\n\n  }\n  render(){\n    if(!this.state.loaded){\n      return <div>loading...</div>\n    }\n    else {\n      return (\n        <div>\n        <EnhancedDetail {...this}/>\n         </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}